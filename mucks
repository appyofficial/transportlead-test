#!/usr/bin/env node
'use strict';

const fs = require('fs');
const os = require('os');
const spawn = require('child_process').spawn;
const glob = require('glob');
const chalk = require('chalk');
const clear = require('clear');
const figlet = require('figlet');
const inquirer = require('inquirer');

const config = {
    mux: 'tmux',
    id: `mucks_${process.pid}`,
    dir: '.',
    name: 'mucks - ' + __dirname,
    tmp: os.tmpdir()
};

function parse_header(lines) {
    while (lines.length > 0 && lines[0].substr(0, 1) !== '[') {
        const line = lines.shift();
        if (line.substr(0, 1) === '#') {
            continue;
        }
        const tokens = line && line.split(':').map(token => token && token.trim()) || [];
        if (config.hasOwnProperty(tokens[0])) {
            config[tokens[0]] = tokens[1];
        }
    }
    return true;
}

const parser = {
    options: { cwd: config.dir, shell: false },

    window(workspace) {
        if (!this.running) {
            this.running = true;
            // console.log('Start new session');
            run('tmux', [/*'-L', config.id,*/ 'new-session', '-d', '-s', config.id, '-n', workspace], this.options);
        } else {
            // console.log('Attach to session');
            run('tmux', [/*'-L', config.id,*/ 'new-window', '-n', workspace], this.options);
        }
    },
    split() {
        this.hsplit();
    },
    hsplit() {
        // console.log('h split');
        run('tmux', [/*'-L', config.id,*/ 'split-window', '-v'], this.options);
    },
    vsplit() {
        // console.log('v split');
        run('tmux', [/*'-L', config.id,*/ 'split-window', '-h'], this.options);
    },
    pane(pane) {
        // console.log('pane');
        run('tmux', [/*'-L', config.id,*/ 'select-pane', '-t', pane], this.options);
    },
    layout(layout) {
        // console.log('layout');
        // run('tmux', [/*'-L', config.id,*/ 'select-layout', layout], this.options);
        run('tmux', [/*'-L', config.id,*/ 'send-keys', `tmux select-layout "${layout}"`, 'C-m'], this.options);
    },
    exec(cmd) {
        // console.log('exec');
        run('tmux', [/*'-L', config.id,*/ 'send-keys', `${cmd}`, 'C-m'], this.options);
    },
    sleep(sleep) {
        // console.log('sleep');
        run('sleep', [sleep], this.options);
    }
};

function parse_layout(lines, argv) {
    const parse = (match, workspace, cmd, cmdArgs, args) => {
        if (workspace) {
            parser.window(workspace);
        } else if (cmd && parser.hasOwnProperty(cmd)) {
            parser[cmd](cmdArgs);
        } else if (args) {
            parser.exec(args.replace(/\$\{args\}/, argv.join(' ')));
        }
    };
    lines.forEach(line => {
        line && typeof line === 'string' && line.replace(/^\s*(?:\[([^\]]+)|-\s*([\w_-]+)(?:\s+(.*))?|(.*))/, parse);
    });
}

function parse_config(filename, args) {
    nfcall(fs.readFile, filename)
        .then(text => text.toString('utf-8').split('\n').map(text => text && text.trim()))
        .then(lines => {
            return Async(function* () {
                yield parse_header(lines);
                yield parse_layout(lines, args);
                run('tmux', [/*'-L', config.id,*/ 'attach-session', '-t', config.id], { cwd: config.dir, stdio: 'inherit' });
            });
        })
        .catch(console.error.bind(console, 'tmux Error:'));
}

const runQueue = {
    is: {
        running: false,
        empty: true,

        get not() {
            const self = this;
            return {
                get running() { return !self.running; },
                set running(flag) { self.running = !flag; },
                get empty() { return !self.empty; },
                set empty(flag) { self.empty = !flag; },
            };
        }
    },
    queue: [],
    push(cmd, args, options) {
        this.queue.push({ cmd, args, options });
        this.is.not.empty = true;
        this.start();
    },
    start() {
        if (this.is.not.running) {
            this.is.running = true;
            const current = this.queue.shift();
            const resolver = (resolve, reject) => {
                // console.log('spawn', current.cmd, current.args, current.options);
                const p = spawn(current.cmd, current.args, current.options);

                p.stdout && p.stdout.on('data', (data) => {
                    console.log(`stdout: ${data}`);
                });

                p.stderr && p.stderr.on('data', (data) => {
                    console.log(`stderr: ${data}`);
                });

                p.on('error', err => {
                    console.error('Error:', err);
                });

                p.on('close', code => {
                    this.is.not.running = true;
                    !code && resolve() || reject(code);
                });
            };
            new Promise(resolver)
                .then(() => {
                    if (this.queue.length > 0) {
                        process.nextTick(() => {
                            this.start();
                        });
                    }
                })
                .catch(code => {
                    console.log(`child process exited with code ${code} (queue: ${this.queue.length})`);
                });
        }
    }
};

function run(cmd, args, options) {
    runQueue.push(cmd, args, options);
}

function base64() {
    return new Buffer(Array.prototype.join.call(arguments, ' ')).toString('base64');
}

function mucks(argv) {
    const args = argv.slice(3);
    nfcall(fs.access, argv[2])
        .then(() => argv[2])
        .catch(err => {
            console.log(`Error: ${argv[2] || 'file'} not specified or not found in the current directory, trying .mucksrc`);
            return nfcall(fs.access, '.mucksrc')
                .then(() => '.mucksrc');
        })
        .then(filename => parse_config(filename, args))
        .catch(err => console.log('Error: .mucksrc not found in the current directory'));
}
module.exports = mucks;

function nfcall(fn, ...args) {
    const resolver = (resolve, reject) => {
        fn(...args, (err, data) => {
            if (err) {
                return reject(err);
            }
            resolve(data);
        });
    };
    return new Promise(resolver);
}

function Async(makeGenerator, ...args) {
    const generator = makeGenerator(...args);
    const resolver = (resolve) => {
        let value = null;
        for (value of generator);
        resolve(value);
    };
    return new Promise(resolver);
}

function header(data) {
    clear();
    console.log(chalk.yellow(figlet.textSync('Mucks', { horizontalLayout: 'full' })));
    return data;
}

function menu(data) {
    return Promise.resolve(data)
        .then(list => ({ type: 'list', name: 'option', message: 'Workspaces\n-----------\n', choices: list, default: 'workspace' }))
        .then(questions => inquirer.prompt(questions))
        .then(answer => answer.option);
}

function actOn(data) {
    return Promise.resolve(clear)
        .then(() => process.argv)
        .then(argv => [argv[0], argv[1], data]);
}

if (require.main === module) {
    if (process.argv[2]) {
        mucks(process.argv);
        return;
    }
    const resolver = (resolve, reject) =>{
        glob('+(workspace|*.workspace|.mucksrc)', (err, matches) => {
            if (err) {
                return reject(err);
            }
            resolve(matches);
        })
    }
    new Promise(resolver)
        // .then(list => ['workspace'].concat(list))
        .then(header)
        .then(menu)
        .then(actOn)
        .then(mucks)
        .catch(console.error);
}
